<?php
/*
 * Copyright Extend (c) 2023. All rights reserved.
 * See Extend-COPYING.txt for license details.
 */
    /** @var Magento\Framework\Escaper $escaper */
    /** @var Magento\Catalog\Block\Product\View $block */

    $viewModel = $block->getData('viewModel');
    $stringUtils = $escaper->escapeJs($block->getViewFileUrl('Extend_HyvaIntegration/js/utils/string-utils.js'));
    $cartUtils = $escaper->escapeJs($block->getViewFileUrl('Extend_HyvaIntegration/js/utils/cart-utils.js'));
?>

<?php
    use \Magento\Catalog\Block\Product\View;
    /** @var View $block */


    $categoryName = '';

    if ($category = $block->getProduct()->getCategory()) {
      $categoryName = $category->getName();
    }

    $viewModel = $block->getData('viewModel');

    $product = $block->getProduct();
    $productSku = $product->getSku();

    /** sanitizing to prevent whitespace and other abnormal characters from being used in a div id */
    $sanitizedProductSku = preg_replace('/[^a-zA-Z0-9_|]/', '',  $productSku);

    $currencyCode = $viewModel->getCurrencyCode();
    $isCurrencySupported = $viewModel->isCurrencySupported();
    $shouldRender = $viewModel->isExtendProductProtectionEnabled()
                    && $viewModel->isProductProtectionProductDisplayPageOfferEnabled()
                    && $isCurrencySupported;

?>

<?php if ($shouldRender) : ?>
  <div class="product-protection-offer"
       id="product_protection_offer_<?= $sanitizedProductSku ?>"
       x-data="product_protection_offer_<?= $sanitizedProductSku ?>"
       x-init="initProductWarrantyOffers();">
  </div>

  <script type="module">
     import stringUtils from '<?= $stringUtils ?>'
     import cart_utils from '<?= $cartUtils ?>'
     //window.cartUtils = cartUtils;

     window.addEventListener(
         'private-content-loaded', (event) => {
             const customerData = event.detail.data;
             const cartUtils = cart_utils(customerData);
             window.cartUtils = cartUtils;
         });


      window.product_protection_offer_<?= $sanitizedProductSku ?> = function()  {
          return {
              initProductWarrantyOffers() {
                  const config = [{
                      extendStoreUuid: "<?= $block->getData('viewModel')->getExtendStoreUuid() ?>",
                      activeEnvironment: "<?= $block->getData('viewModel')->getActiveEnvironment() ?>",
                      selectedProductSku: "<?= $block->getProduct()->getSku(); ?>",
                      selectedProductPrice: "<?= $block->getProduct()->getPrice(); ?>",
                      productCategory: "<?= $categoryName; ?>",
                      currencyCode: "<?= $currencyCode ?>",
                      selectedConfigurableProduct: {}
                  }]

                  window.addEventListener(
                      'load', () => {
                        this.productProtectionOffer(config);
                      });
              },

              productProtectionOffer(config) {
                  'use strict';

                  const getProductQuantity = function () {
                      let quantity = 1
                      const quantityInput = document.querySelector('.input-text.qty')
                      if (quantityInput) quantity = parseInt(quantityInput.value)
                      return quantity
                  }

                  // Get the chosen simple product based on the configurable options selected.
                  function getActiveProductConfig() {
                      //const swatches = document.querySelector('div.swatch-attribute', '.product-info-main')

                      let selectedProductSku = null
                      let selectedPrice = null

                      if (swatches && swatches.length > 0) {
                          const swatchesElem = document.querySelector('[data-role=swatch-options]', '.product-info-main')
                          const swatchRenderer = swatchesElem.dataset.mageSwatchRenderer
                          // ? swatchesElem.dataset.mageSwatchRenderer
                          // : swatchesElem.dataset.mage-SwatchRenderer

                          //JM note : mage-Swatchrender ?

                          if (swatchRenderer) {
                              const selectedProducts = swatchRenderer._CalcProducts()
                              const selectedId =
                                  // eslint-disable-next-line no-undef -- Magento injected global
                                  _.isArray(selectedProducts) && selectedProducts.length === 1
                                      ? selectedProducts[0]
                                      : null
                              if (selectedId && selectedId !== '') {
                                  selectedPrice =
                                      swatchRenderer.options.jsonConfig.optionPrices[selectedId]
                                          .finalPrice.amount
                                  selectedProductSku = swatchRenderer.options.jsonConfig.sku[selectedId]
                              }
                          }
                      } else {
                          const spConfig = document.querySelector('#product_addtocart_form').dataset.mageConfigurable
                              ?.options?.spConfig
                          const selectedId = document.querySelector(
                              'input[name=selected_configurable_option]',
                              '.product-info-main',
                          ).value
                          if (selectedId && selectedId !== '') {
                              selectedProductSku =
                                  spConfig && spConfig.skus ? spConfig.skus[selectedId] : null
                          }
                      }
                      return {selectedProductSku, selectedPrice}
                  }

                   return function() {
                      Extend.config({
                          storeId: config[0].extendStoreUuid,
                          environment: config[0].activeEnvironment,
                          currency: config[0].currencyCode,
                      })

                      for (let key in config) {
                          Extend.buttons.render(
                              '#product_protection_offer_' +
                              stringUtils.sanitizeForElementId(config[key].selectedProductSku),
                              {
                                  referenceId: config[key].selectedProductSku,
                                  price: config[key].selectedProductPrice * 100,
                              },
                          )
                      }

                      // Listening for product options being chosen on configurable products.  Display offer once all required options are chosen.
                      window.addEventListener('configurable-selection-changed', (event) => {
                          window.eventdetail = event.detail;

                          // please use __x.$data for older versions of hyva
                          // newer version = _x_datastack[0]

                          let selectedPrice =  <?= $product->getFinalPrice(); ?>;
                          let selectedProductSku = '<?= $product->getSku(); ?>';

                          const optionsConfig = document.querySelector('div[x-data="initConfigurableSwatchOptions_' + eventdetail.productId + '()"]')._x_dataStack[0].optionConfig;
                          const productIndex = document.querySelector('div[x-data="initConfigurableSwatchOptions_' + eventdetail.productId + '()"]')._x_dataStack[0].productIndex;

                          if (productIndex && productIndex !== 0 ){
                              selectedPrice =  optionsConfig.optionPrices[productIndex].finalPrice;
                              selectedProductSku = optionsConfig.sku[productIndex];
                          }

                          const selectedProduct = { selectedProductSku, selectedPrice };

                          const buttonInstance = Extend.buttons.instance(
                              '#product_protection_offer_' +
                              stringUtils.sanitizeForElementId(config[0].selectedProductSku),
                          )
                          const activeProductData = {
                              referenceId: selectedProduct.selectedProductSku,
                              price: selectedProduct.selectedPrice * 100,
                          }
                          if (buttonInstance) {
                              const selectedConfPrice = selectedPrice.amount*100;
                              config[0].selectedConfigurableProduct={selectedProductSku, selectedConfPrice }
                              buttonInstance.setActiveProduct(activeProductData)
                          } else {
                              Extend.buttons.render(
                                  '#product_protection_offer_' +
                                  stringUtils.sanitizeForElementId(config[0].selectedProductSku),
                                  activeProductData,
                              )
                          }
                      },
                     )

                     // Listen for the add to cart button to be clicked.  Show modal offer on qualifying simple and configurable products if no offer was chosen by the customer.
                      document
                          .getElementById('product-addtocart-button')
                          .addEventListener('click', function (event) {
                              const buttonInstance = Extend.buttons.instance(
                                  '#product_protection_offer_' +
                                  stringUtils.sanitizeForElementId(config[0].selectedProductSku),
                              )

                              if (buttonInstance) {
                                  if (config.length === 1) {
                                      let selectedProduct

                                      if (
                                          buttonInstance.getActiveProduct().id ===
                                          config[0].selectedProductSku
                                      ) {
                                          selectedProduct = config[0];
                                      } else {
                                          selectedProduct = config[0].selectedConfigurableProduct;
                                      }

                                      const cartItems = cartUtils
                                          .getCartItems()
                                          .map(cartUtils.mapToExtendCartItem)
                                      const quantity = getProductQuantity()

                                      const selectedPlan = buttonInstance.getPlanSelection()

                                      // If a plan is selected, add it to the cart
                                      if (selectedPlan) {
                                          const {planId, price, term, title, coverageType, offerId} =
                                              selectedPlan
                                          const {
                                              selectedProductSku: productId,
                                              selectedPrice: listPrice,
                                          } = selectedProduct

                                          const planToUpsert = {
                                              planId,
                                              price,
                                              term,
                                              title,
                                              coverageType,
                                          }

                                          ExtendMagento.upsertProductProtection({
                                              plan: planToUpsert,
                                              cartItems,
                                              productId,
                                              listPrice,
                                              offerId,
                                              quantity,
                                          }).then(cartUtils.refreshMiniCart)
                                          // If no plan is selected, open the offer modal
                                      } else {
                                          event.preventDefault()
                                          event.stopPropagation()
                                          Extend.modal.open({
                                              referenceId: selectedProduct.selectedProductSku,
                                              price: selectedProduct.selectedProductPrice * 100,
                                              onClose: function (plan, product) {
                                                  if (plan && product) {
                                                      const {
                                                          planId,
                                                          price,
                                                          term,
                                                          title,
                                                          coverageType,
                                                          offerId,
                                                      } = plan
                                                      const {id: productId, price: listPrice} = product

                                                      const planToUpsert = {
                                                          planId,
                                                          price,
                                                          term,
                                                          title,
                                                          coverageType,
                                                      }

                                                      ExtendMagento.upsertProductProtection({
                                                          plan: planToUpsert,
                                                          cartItems,
                                                          productId,
                                                          listPrice,
                                                          offerId,
                                                          quantity,
                                                      }).then(cartUtils.refreshMiniCart)
                                                  }
                                                  document.querySelector('#product_addtocart_form').submit()
                                              },
                                          })
                                      }
                                  }
                              }
                          })
                  }.bind(window.Extend, window.ExtendMagento)();
              }
          }
      }
  </script>
<?php endif; ?>
